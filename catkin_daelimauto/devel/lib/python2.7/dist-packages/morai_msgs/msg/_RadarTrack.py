# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from morai_msgs/RadarTrack.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class RadarTrack(genpy.Message):
  _md5sum = "da20584d0f09f9e2d2e7565bee064422"
  _type = "morai_msgs/RadarTrack"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# This message relates only to FMCW radar.  
# All variables below are relative to the radar's frame of reference.
# This message is not meant to be used alone but as part of a stamped or array message.

# Object classifications (Additional vendor-specific classifications are permitted starting from 32000 eg. Car)

int8 uuid

                                            # Note: The z component of these fields is ignored for 2D tracking.
geometry_msgs/Point position                # x, y, z coordinates of the centroid of the object being tracked.
geometry_msgs/Vector3 velocity              # The velocity of the object in each spatial dimension.
geometry_msgs/Vector3 acceleration          # The acceleration of the object in each spatial dimension.
geometry_msgs/Vector3 size                  # The object size as represented by the radar sensor eg. length, width, height OR the diameter of an ellipsoid in the x, y, z, dimensions
                                            # and is from the sensor frame's view.
uint16 classification                       # An optional classification of the object (see above)

float32[] position_covariance              # Upper-triangle covariance about the x, y, z axes
float32[] velocity_covariance              # Upper-triangle covariance about the x, y, z axes
float32[] acceleration_covariance          # Upper-triangle covariance about the x, y, z axes
float32[] size_covariance                  # Upper-triangle covariance about the x, y, z axes

float32 amplitude


================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['uuid','position','velocity','acceleration','size','classification','position_covariance','velocity_covariance','acceleration_covariance','size_covariance','amplitude']
  _slot_types = ['int8','geometry_msgs/Point','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','uint16','float32[]','float32[]','float32[]','float32[]','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       uuid,position,velocity,acceleration,size,classification,position_covariance,velocity_covariance,acceleration_covariance,size_covariance,amplitude

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RadarTrack, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.uuid is None:
        self.uuid = 0
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Vector3()
      if self.acceleration is None:
        self.acceleration = geometry_msgs.msg.Vector3()
      if self.size is None:
        self.size = geometry_msgs.msg.Vector3()
      if self.classification is None:
        self.classification = 0
      if self.position_covariance is None:
        self.position_covariance = []
      if self.velocity_covariance is None:
        self.velocity_covariance = []
      if self.acceleration_covariance is None:
        self.acceleration_covariance = []
      if self.size_covariance is None:
        self.size_covariance = []
      if self.amplitude is None:
        self.amplitude = 0.
    else:
      self.uuid = 0
      self.position = geometry_msgs.msg.Point()
      self.velocity = geometry_msgs.msg.Vector3()
      self.acceleration = geometry_msgs.msg.Vector3()
      self.size = geometry_msgs.msg.Vector3()
      self.classification = 0
      self.position_covariance = []
      self.velocity_covariance = []
      self.acceleration_covariance = []
      self.size_covariance = []
      self.amplitude = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_b12dH().pack(_x.uuid, _x.position.x, _x.position.y, _x.position.z, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.acceleration.x, _x.acceleration.y, _x.acceleration.z, _x.size.x, _x.size.y, _x.size.z, _x.classification))
      length = len(self.position_covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.position_covariance))
      length = len(self.velocity_covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.velocity_covariance))
      length = len(self.acceleration_covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.acceleration_covariance))
      length = len(self.size_covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.size_covariance))
      _x = self.amplitude
      buff.write(_get_struct_f().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Vector3()
      if self.acceleration is None:
        self.acceleration = geometry_msgs.msg.Vector3()
      if self.size is None:
        self.size = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 99
      (_x.uuid, _x.position.x, _x.position.y, _x.position.z, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.acceleration.x, _x.acceleration.y, _x.acceleration.z, _x.size.x, _x.size.y, _x.size.z, _x.classification,) = _get_struct_b12dH().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.position_covariance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.velocity_covariance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.acceleration_covariance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.size_covariance = s.unpack(str[start:end])
      start = end
      end += 4
      (self.amplitude,) = _get_struct_f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_b12dH().pack(_x.uuid, _x.position.x, _x.position.y, _x.position.z, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.acceleration.x, _x.acceleration.y, _x.acceleration.z, _x.size.x, _x.size.y, _x.size.z, _x.classification))
      length = len(self.position_covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.position_covariance.tostring())
      length = len(self.velocity_covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.velocity_covariance.tostring())
      length = len(self.acceleration_covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.acceleration_covariance.tostring())
      length = len(self.size_covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.size_covariance.tostring())
      _x = self.amplitude
      buff.write(_get_struct_f().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Vector3()
      if self.acceleration is None:
        self.acceleration = geometry_msgs.msg.Vector3()
      if self.size is None:
        self.size = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 99
      (_x.uuid, _x.position.x, _x.position.y, _x.position.z, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.acceleration.x, _x.acceleration.y, _x.acceleration.z, _x.size.x, _x.size.y, _x.size.z, _x.classification,) = _get_struct_b12dH().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.position_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.velocity_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.acceleration_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.size_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (self.amplitude,) = _get_struct_f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_b12dH = None
def _get_struct_b12dH():
    global _struct_b12dH
    if _struct_b12dH is None:
        _struct_b12dH = struct.Struct("<b12dH")
    return _struct_b12dH
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
